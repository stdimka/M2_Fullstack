function resetOtherOutputs(exceptId) {
    document.querySelectorAll(".language-javascript").forEach(output => {
        if (output.id !== exceptId) {
            output.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
        }
    });
}

function displayCode(filename, idRun) {
    resetOtherOutputs(idRun); // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥—Ä—É–≥–∏–µ id
    fetch(`js/${filename}`) // üîπ –¢–µ–ø–µ—Ä—å –±–µ–∑ `js/`, —Ç.–∫. –≤ `runScript` —É–∂–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        .then(response => response.text())
        .then(jsCode => {
            let codeBlock = document.getElementById(idRun);
            if (!codeBlock) {
                console.error(`–≠–ª–µ–º–µ–Ω—Ç #${idRun} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
                return;
            }
            codeBlock.textContent = jsCode; // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥
            Prism.highlightElement(codeBlock); // –ü–æ–¥—Å–≤–µ—Ç–∫–∞
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error));
}

function captureLogs(callback, idConsoleOutput) {
    let outputElement = document.getElementById(idConsoleOutput);
    if (!outputElement) {
        console.error(`–≠–ª–µ–º–µ–Ω—Ç #${idConsoleOutput} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        return;
    }

    let oldLog = console.log;
    outputElement.textContent = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞

    console.log = function (...args) {
        outputElement.textContent += args.join(" ") + "\n";
        oldLog.apply(console, args); // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ DevTools
    };

    try {
        callback();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞:", error);
    }

    console.log = oldLog; // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ console.log
}

function runScript(filename, idConsoleOutput) {
    fetch(`js/${filename}`) //
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
            }
            return response.text();
        })
        .then(jsCode => {
            captureLogs(() => {
                new Function(jsCode)(); // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–¥
            }, idConsoleOutput);
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞:", error));
}